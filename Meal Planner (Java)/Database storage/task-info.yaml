type: edu
files:
  - name: build.gradle
    visible: true
    text: |
      repositories {
          mavenCentral()
      }
      
      dependencies {
          implementation 'org.postgresql:postgresql:42.2.27'
      }
    learner_created: false
  - name: test/MealPlannerTests.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.sql.*;
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      import java.util.Objects;
      
      public class MealPlannerTests extends StageTest {
      
        static final String DB_URL = "jdbc:postgresql:meals_db";
        static final String USER = "postgres";
        static final String PASS = "1111";
      
        public class Column {
          private String first;
          private String second;
      
          public Column(String first, String second) {
            this.first = first;
            this.second = second;
          }
      
          @Override
          public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Column column = (Column) o;
            return Objects.equals(first, column.first) && Objects.equals(second, column.second);
          }
      
          @Override
          public int hashCode() {
            return Objects.hash(first, second);
          }
        }
      
        class dbTable {
          String name;
          List<Column> columnNameType;
      
          public dbTable(String name, List<Column> columnNameType) {
            this.name = name;
            this.columnNameType = columnNameType;
          }
        }
      
        void checkTableSchema(List<dbTable> tables) {
          try {
            Connection connection = DriverManager.getConnection(DB_URL, USER, PASS);
            DatabaseMetaData meta = connection.getMetaData();
            for (dbTable table : tables) {
              ResultSet tableMeta = meta.getTables(null, null, table.name, null);
              if (!tableMeta.next() || !table.name.equalsIgnoreCase(tableMeta.getString("TABLE_NAME"))) {
                throw new WrongAnswer("The table \"" + table.name + "\" doesn't exist.");
              }
              ResultSet columns = meta.getColumns(null, null, table.name, null);
              List<Column> columnsData = new ArrayList<>();
              while (columns.next()) {
                Column column = new Column(
                        columns.getString("COLUMN_NAME").toLowerCase(),
                        columns.getString("TYPE_NAME").toLowerCase());
                columnsData.add(column);
              }
              for (Column c : table.columnNameType) {
                if (!columnsData.contains(c)) {
                  for (Column c2 : columnsData) {
                    if (c.first.equals(c2.first)) {
                      throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" is of the " +
                              "wrong type.");
                    }
                  }
                  throw new WrongAnswer("The column \"" + c.first + "\" of the table \"" + table.name + "\" doesn't exist.");
                }
              }
            }
            connection.close();
          } catch (Exception e) {
            throw new WrongAnswer("An exception was thrown, while trying to check the database schema - " + e.getMessage());
          }
        }
      
        void checkConnection() {
          try {
            Class.forName("org.postgresql.Driver");
          } catch (ClassNotFoundException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. PostgreSQL JDBC Driver is " +
                    "not found.");
          }
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (SQLException e) {
            throw new WrongAnswer("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          if (connection == null) {
            throw new WrongAnswer("Failed to make connection to database");
          }
        }
      
        @DynamicTest(order = 1)
        public CheckResult normalExe6Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - "+e);
          }
      
          CheckOutput co = new CheckOutput();
          if (!co.start("What would you like to do (add, show, exit)?"))
            return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
          ArrayList<dbTable> tables = new ArrayList<>(Arrays.asList(
                  new dbTable("ingredients", new ArrayList<>(
                          Arrays.asList(
                                  new Column("ingredient", "varchar"),
                                  new Column("ingredient_id", "int4"),
                                  new Column("meal_id", "int4")
                          )
                  )),
                  new dbTable("meals", new ArrayList<>(
                          Arrays.asList(
                                  new Column("category", "varchar"),
                                  new Column("meal", "varchar"),
                                  new Column("meal_id", "int4")
                          )
                  ))
          ));
          checkTableSchema(tables);
      
          if (!co.input("exit", "Bye!"))
            return CheckResult.wrong("Your output should contain \"Bye!\"");
          if (!co.programIsFinished())
            return CheckResult.wrong("The application didn't exit.");
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 2)
        CheckResult normalExe7Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - "+e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("sushi", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("salmon, rice, avocado", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input("show",
                    "Category: lunch", "Name: sushi", "Ingredients:", "salmon", "rice", "avocado"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 3)
        CheckResult normalExe8Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input(
                    "show", "Category: lunch", "Name: sushi", "Ingredients:",
                    "salmon", "rice", "avocado"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 4)
        CheckResult normalExeNew01Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            Statement statement = connection.createStatement();
            statement.executeUpdate("DROP TABLE if exists plan");
            statement.executeUpdate("DROP TABLE if exists ingredients");
            statement.executeUpdate("DROP TABLE if exists meals");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to drop tables - "+e);
          }
      
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("lunch", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("sushi", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("salmon, rice, avocado", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("breakfast", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("english", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("sausages, eggs", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input("add", "Which meal do you want to add (breakfast, lunch, dinner)?"))
              return CheckResult.wrong("Your program should ask the user about meal category: \"(breakfast, lunch, dinner)" +
                      "?\"");
      
            if (!co.input("dinner", "Input the meal's name:"))
              return CheckResult.wrong("Your output should contain \"Input the meal's name:\"");
      
            if (!co.input("meatballs", "Input the ingredients:"))
              return CheckResult.wrong("Your output should contain \"Input the ingredients:\"");
      
            if (!co.input("meat, bread, salt, pepper, egg", "The meal has been added!"))
              return CheckResult.wrong("Your output should contain \"The meal has been added!\"");
      
            if (!co.inputNext("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input(
                    "show", "Category: lunch", "Name: sushi", "Ingredients:",
                    "salmon", "rice", "avocado"))
              return CheckResult.wrong("Wrong \"show\" output for the lunch meal.");
      
            if (!co.inputNext("Category: breakfast", "Name: english", "Ingredients:",
                    "sausages", "eggs"))
              return CheckResult.wrong("Wrong \"show\" output for the breakfast meal.");
      
            if (!co.inputNext("Category: dinner", "Name: meatballs", "Ingredients:",
                    "meat", "bread", "salt", "pepper", "egg"))
              return CheckResult.wrong("Wrong \"show\" output for the dinner meal.");
      
            if (!co.inputNext("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      
        @DynamicTest(order = 5)
        CheckResult normalExeNew02Test() {
          checkConnection();
          Connection connection = null;
          try {
            connection = DriverManager.getConnection(DB_URL, USER, PASS);
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown, while trying to connect to database. Connection Failed");
          }
          try {
            CheckOutput co = new CheckOutput();
            if (!co.start("What would you like to do (add, show, exit)?"))
              return CheckResult.wrong("Your program should ask the user about the required action: \"(add, show, exit)?\"");
      
            if (!co.input(
                    "show", "Category: lunch", "Name: sushi", "Ingredients:",
                    "salmon", "rice", "avocado"))
              return CheckResult.wrong("Wrong \"show\" output for a saved meal.");
      
            if (!co.input("exit", "Bye!"))
              return CheckResult.wrong("Your output should contain \"Bye!\"");
      
            if (!co.programIsFinished())
              return CheckResult.wrong("The application didn't exit.");
          } catch (Exception e) {
            return CheckResult.wrong("An exception was thrown while testing - " + e);
          }
      
          return CheckResult.correct();
        }
      }
      
      
      class CheckOutput {
        private TestedProgram main = new TestedProgram();
        private int position = 0;
        private boolean caseInsensitive = true;
        private boolean trimOutput = true;
        private List<String> arguments = new ArrayList<>();
        private boolean isStarted = false;
        private String lastOutput = "";
      
        private boolean checkOutput(String outputString, String... checkStr) {
          int searchPosition = position;
          for (String cStr : checkStr) {
            String str = caseInsensitive ? cStr.toLowerCase() : cStr;
            int findPosition = outputString.indexOf(str, searchPosition);
            if (findPosition == -1) return false;
            if (!outputString.substring(searchPosition, findPosition).isBlank()) return false;
            searchPosition = findPosition + str.length();
          }
          position = searchPosition;
          return true;
        }
      
        public boolean start(String... checkStr) {
          if (isStarted)
            return false;
          var outputString = main.start(arguments.toArray(new String[]{}));
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          isStarted = true;
          return checkOutput(outputString, checkStr);
        }
      
        public void stop() {
          main.stop();
        }
      
        public boolean input(String input, String... checkStr) {
          if (main.isFinished()) return false;
          String outputString = main.execute(input);
          lastOutput = outputString;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          position = 0;
          return checkOutput(outputString, checkStr);
        }
      
        public boolean inputNext(String... checkStr) {
          String outputString = lastOutput;
          if (trimOutput) outputString = outputString.trim();
          if (caseInsensitive) outputString = outputString.toLowerCase();
          return checkOutput(outputString, checkStr);
        }
      
        public String getNextOutput(String input) {
          if (main.isFinished()) return "";
          String outputString = main.execute(input);
          lastOutput = outputString;
          position = 0;
          return outputString;
        }
      
        public String getLastOutput() {
          return lastOutput;
        }
      
        public boolean programIsFinished() {
          return main.isFinished();
        }
      
        public void setArguments(String... arguments) {
          this.arguments = Arrays.stream(arguments).toList();
        }
      
        public void setCaseInsensitive(boolean caseInsensitive) {
          this.caseInsensitive = caseInsensitive;
        }
      
        public void setTrimOutput(boolean trimOutput) {
          this.trimOutput = trimOutput;
        }
      }
    learner_created: false
  - name: src/mealplanner/entities/enums/MealEnum.java
    visible: true
    text: |
      package mealplanner.entities.enums;
      
      public enum MealEnum {
          BREAKFAST, LUNCH, DINNER;
      }
    learner_created: true
  - name: src/mealplanner/application/Main.java
    visible: true
    text: |+
      package mealplanner.application;
      
      import mealplanner.entities.Meal;
      import mealplanner.entities.enums.MealEnum;
      
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      import java.util.Scanner;
      
      public class Main {
          public static void main(String[] args) {
              Scanner sc = new Scanner(System.in);
              boolean running = true;
              List<Meal> mealList = new ArrayList<>();
      
              while (running) {
                  System.out.println("What would you like to do (add, show, exit)?");
                  String option = sc.nextLine();
                  switch (option) {
                      case "add":
                          boolean addMeal = true;
                          System.out.println("Which meal do you want to add (breakfast, lunch, dinner)?");
                          while (addMeal) {
                              String meal = sc.nextLine();
                              switch (meal) {
                                  case "breakfast":
                                  case "lunch":
                                  case "dinner":
                                      System.out.println("Input the meal's name: ");
                                      String mealName = sc.nextLine();
                                      if (isInvalidMealName(mealName)) {
                                          do {
                                              System.out.println("Wrong format. Use letters only!");
                                              mealName = sc.nextLine();
                                          } while (isInvalidMealName(mealName));
                                      }
      
                                      System.out.println("Input the ingredients: ");
                                      String ingredientsString = sc.nextLine();
                                      List<String> untrimmedIngredients = Arrays.stream(ingredientsString.split(",")).toList();
      
                                      if (isInvalidIngredientList(untrimmedIngredients)) {
                                          do {
                                              System.out.println("Wrong format. Use letters only!");
                                              ingredientsString = sc.nextLine();
                                              untrimmedIngredients = Arrays.stream(ingredientsString.split(",")).toList();
                                          } while (isInvalidIngredientList(untrimmedIngredients));
                                      }
                                      List<String> ingredients = trimIngredients(untrimmedIngredients);
      
                                      Meal meal1 = new Meal(MealEnum.valueOf(meal.toUpperCase()), mealName, ingredients);
      
                                      System.out.println("The meal has been added!");
      
                                      mealList.add(meal1);
                                      addMeal = false;
                                      break;
                                  default:
                                      System.out.println("Wrong meal category! Choose from: breakfast, lunch, dinner.");
                                      break;
                              }
                          }
                          break;
      
                      case "show":
                          if (mealList.isEmpty()) {
                              System.out.println("No meals saved. Add a meal first.");
                          } else {
                              for (Meal m : mealList) {
                                  System.out.println(m.toString());
                                  System.out.println();
                              }
                          }
                          break;
      
                      case "exit":
                          System.out.println("Bye!");
                          running = false;
                          break;
      
                      default:
                          break;
                  }
              }
              sc.close();
          }
      
          static boolean isInvalidMealName(String input) {
              if (input == null || input.isEmpty() || input.isBlank()) {
                  return true;
              }
      
              for (char letter : input.toCharArray()) {
                  if (!Character.isLetter(letter) && !Character.isWhitespace(letter)) {
                      return true;
                  }
              }
      
              return false;
          }
      
          static boolean isInvalidIngredientList(List<String> list) {
              for (String ingredient : list) {
                  if (ingredient.isBlank() || !ingredientContainsOnlyLetters(ingredient)) {
                      return true;
                  }
              }
              return false;
          }
      
          static boolean ingredientContainsOnlyLetters(String str) {
              String trimmedStr = str.trim();
              for (char c : trimmedStr.toCharArray()) {
                  if (!Character.isLetter(c) && !Character.isWhitespace(c)) {
                      return false;
                  }
              }
              return true;
          }
      
          static List<String> trimIngredients(List<String> ingredients) {
              List<String> trimmedIngredients = new ArrayList<>();
              for (String ingredient : ingredients) {
                  String trimmedIngredient = ingredient.trim();
                  trimmedIngredients.add(trimmedIngredient);
              }
              return trimmedIngredients;
          }
      
      }
    
    
    learner_created: true
  - name: src/mealplanner/entities/Meal.java
    visible: true
    text: |
      package mealplanner.entities;
      
      import mealplanner.entities.enums.MealEnum;
      
      import java.util.Arrays;
      import java.util.List;
      import java.util.stream.Collectors;
      
      public class Meal {
          private MealEnum meal;
          private String mealName;
          private List<String> ingredients;
      
          public Meal(MealEnum meal, String mealName, List<String> ingredients) {
              this.meal = meal;
              this.mealName = mealName;
              this.ingredients = ingredients;
          }
      
          public MealEnum getMeal() {
              return meal;
          }
      
          public void setMeal(MealEnum meal) {
              this.meal = meal;
          }
      
          public String getMealName() {
              return mealName;
          }
      
          public void setMealName(String mealName) {
              this.mealName = mealName;
          }
      
          public List<String> getIngredients() {
              return ingredients;
          }
      
          public void addIngredient(String ingredient) {
              ingredients.add(ingredient);
          }
      
          public void removeIngredient(String ingredient) {
              ingredients.remove(ingredient);
          }
      
          @Override
          public String toString() {
      
      
              return "Category: " + getMeal().toString().toLowerCase() + "\n"
                      + "Name: " + getMealName() + "\n"
                      + "Ingredients:\n" + String.join(System.lineSeparator(), ingredients);
          }
      }
    learner_created: true
  - name: src/mealplanner/application/MealApplication.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/25573#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Wed, 28 Feb 2024 19:27:16 UTC"
record: 3
